package jdbcdemo.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import jdbcdemo.dao.mappers.ResultSetMapper;
import jdbcdemo.domain.Car;
import jdbcdemo.domain.Person;

public class CarRepository extends RepositoryBase<Car>{

	public CarRepository(Connection connection, ResultSetMapper<Car> mapper) throws SQLException{
		super(connection, mapper);
	}

	@Override
	protected String selectAllSql() {
		return "SELECT * FROM cars";
	}

	@Override
	protected String deleteSql() {
		return "DELETE FROM cars WHERE id=?";
	}

	@Override
	protected String updateSql() {
		return "UPDATE cars SET (brand, regstration) = (?,?) WHERE id=?";
	}

	@Override
	protected String insertSql() {
		return "INSERT INTO cars(brand,registration) VALUES (?,?)";
	}

	@Override
	protected String createTableSql() {
		return "CREATE TABLE cars("
				+ "id INT GENERATED BY DEFAULT AS IDENTITY,"
				+ "brand VARCHAR(20),"
				+ "registration VARCHAR(10)"
				+ ")";
	}

	@Override
	protected String tableName() {
		return "cars";
	}

	@Override
	protected void setInsert(Car car) throws SQLException {
		insert.setString(1, car.getBrand());
		insert.setString(2, car.getRegistration());
	}

	@Override
	protected void setUpdate(Car entity) throws SQLException {
		update.setString(1, entity.getBrand());
		update.setString(2, entity.getRegistration());
		update.setInt(3, entity.getId());
	}
}
